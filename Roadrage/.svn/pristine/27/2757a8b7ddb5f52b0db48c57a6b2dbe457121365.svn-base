/*
 * TCSS 305 - Road Rage
 */

package tests;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import model.Car;
import model.Direction;
import model.Light;
import model.Terrain;
import model.Truck;

import org.junit.Test;

/**
 * Unit tests for class Truck.
 * 
 * @author Kenneth Ahrens
 * @version Fall 2020
 */
public class TruckTest {

	/**
	 * The number of times to repeat a test to have a high probability that all
	 * random possibilities have been explored.
	 */
	private static final int TRIES_FOR_RANDOMNESS = 50;

	/** Test method for Truck constructor. */
	@Test
	public void testTruckConstructor() {
		final Truck t = new Truck(10, 11, Direction.NORTH);

		assertEquals("Truck x coordinate not initialized correctly!", 10,
				t.getX());
		assertEquals("Truck y coordinate not initialized correctly!", 11,
				t.getY());
		assertEquals("Truck direction not initialized correctly!",
				Direction.NORTH, t.getDirection());
		assertEquals("Truck death time not initialized correctly!", 0,
				t.getDeathTime());
		assertTrue("Truck isAlive() fails initially!", t.isAlive());
	}

	/** Test method for Truck setters. */
	@Test
	public void testTruckSetters() {
		final Truck t = new Truck(10, 11, Direction.NORTH);

		t.setX(12);
		assertEquals("Truck setX failed!", 12, t.getX());
		t.setY(13);
		assertEquals("Truck setY failed!", 13, t.getY());
		t.setDirection(Direction.SOUTH);
		assertEquals("Truck setDirection failed!", Direction.SOUTH,
				t.getDirection());
	}

	/**
	 * Test method for {@link Truck#canPass(Terrain, Light)}.
	 */
	@Test
	public void testCanPass() {

		/*
		 * Trucks can move on streets, lights, and cross-walks.
		 * 
		 * Trucks should never move to other terrain types.
		 * 
		 * Trucks should only reverse as a last resort.
		 */

		final List<Terrain> validTerrain = new ArrayList<>();
		validTerrain.add(Terrain.STREET);
		validTerrain.add(Terrain.CROSSWALK);
		validTerrain.add(Terrain.LIGHT);

		final Truck truck = new Truck(0, 0, Direction.NORTH);
		// test each terrain type as a destination
		for (final Terrain destinationTerrain : Terrain.values()) {
			// try the test under each light condition
			for (final Light currentLightCondition : Light.values()) {
				if (destinationTerrain == Terrain.STREET) {

					// trucks can pass under any light condition
					assertTrue(
							"Truck should be able to pass STREET"
									+ ", with light " + currentLightCondition,
							truck.canPass(destinationTerrain,
									currentLightCondition));
				} else if (destinationTerrain == Terrain.CROSSWALK) {
					// trucks can pass a cross walk on yellow or green light

					if (currentLightCondition == Light.RED) {
						assertFalse(
								"Truck should NOT be able to pass "
										+ destinationTerrain + ", with light "
										+ currentLightCondition,
								truck.canPass(destinationTerrain,
										currentLightCondition));
					} else { // light is yellow or green
						assertTrue(
								"Human should be able to pass "
										+ destinationTerrain + ", with light "
										+ currentLightCondition,
								truck.canPass(destinationTerrain,
										currentLightCondition));
					}
				}
			}
		}
	}

	/**
	 * Test method for {@link Truck#chooseDirection(java.util.Map)}.
	 */
	@Test
	public void testChooseDirectionSurroundedByStreet() {
		final Map<Direction, Terrain> neighbors = new HashMap<Direction, Terrain>();
		neighbors.put(Direction.WEST, Terrain.STREET);
		neighbors.put(Direction.NORTH, Terrain.STREET);
		neighbors.put(Direction.EAST, Terrain.STREET);
		neighbors.put(Direction.SOUTH, Terrain.STREET);

		boolean seenWest = false;
		boolean seenNorth = false;
		boolean seenEast = false;
		boolean seenSouth = false;

		final Truck truck = new Truck(0, 0, Direction.NORTH);

		for (int count = 0; count < TRIES_FOR_RANDOMNESS; count++) {
			final Direction d = truck.chooseDirection(neighbors);

			if (d == Direction.WEST) {
				seenWest = true;
			} else if (d == Direction.NORTH) {
				seenNorth = true;
			} else if (d == Direction.EAST) {
				seenEast = true;
			} else if (d == Direction.SOUTH) { // this should NOT be chosen
				seenSouth = true;
			}
		}

		assertTrue(
				"Truck chooseDirection() fails to select randomly "
						+ "among all possible valid choices!",
				seenWest && seenNorth && seenEast);

		assertFalse(
				"Truck chooseDirection() reversed direction when not necessary!",
				seenSouth);
	}

	/**
	 * Test method for {@link Truck#chooseDirection(java.util.Map)}.
	 */
	@Test
	public void testChooseDirectionMustReverse() {

		for (final Terrain t : Terrain.values()) {

			// it can't move through a grass terrain, so if we leave only street
			// as the reverse of its current direction it has to move in reverse
			if (t == Terrain.GRASS) {

				final Map<Direction, Terrain> neighbors = new HashMap<Direction, Terrain>();
				neighbors.put(Direction.WEST, t);
				neighbors.put(Direction.NORTH, t);
				neighbors.put(Direction.EAST, t);
				neighbors.put(Direction.SOUTH, Terrain.STREET);

				final Truck truck = new Truck(0, 0, Direction.NORTH);

				// the Truck must reverse and go SOUTH
				assertEquals(
						"TruckchooseDirection() failed "
								+ "when reverse was the only valid choice!",
						Direction.SOUTH, truck.chooseDirection(neighbors));
			}

		}
	}

	/**
	 * Test method for collission
	 */
	@Test
	public void testTruckDoesNotDie() {
		// a truck should never die in a collision
		Truck t = new Truck(0, 0, Direction.NORTH);
		Car c = new Car(0, 0, Direction.NORTH);

		t.collide(c);
		c.collide(t);

		// collide two alive vehicles
		assertTrue(
				"Truck should never die, but died in a collission with alive vehicle.",
				t.isAlive());
		assertFalse(
				"Car should have died, but did not die in a collission with a truck.",
				c.isAlive());

		// collide with dead vehicle
		t.collide(c);
		assertTrue(
				"Truck should not have died in a collission with dead vehicle.",
				t.isAlive());

	}

	/**
	 * Test method to specifically test for the only instance a truck stops
	 */
	@Test
	public void testTruckStopsAtRedCrosswalk() {

		Truck t = new Truck(0, 0, Direction.NORTH);
		assertFalse("Truck is not stopping at a red crosswalk.",
				t.canPass(Terrain.CROSSWALK, Light.RED));

	}

	/**
	 * Test method to ensure truck passes all lights except for
	 * red crosswalks.
	 * 
	 */
	@Test
	public void testTruckCanPassMostLights() {
		// a truck should never die in a collision
		Truck t = new Truck(0, 0, Direction.NORTH);
		assertTrue("Truck should not stop at a red streetlight.",
				t.canPass(Terrain.STREET, Light.RED));
		assertTrue("Truck should not stop at a yellow streetlight.",
				t.canPass(Terrain.STREET, Light.YELLOW));
		assertTrue("Truck should not stop at a green streetlight.",
				t.canPass(Terrain.STREET, Light.GREEN));
		assertTrue("Truck should not stop at a green crosswalk light.",
				t.canPass(Terrain.CROSSWALK, Light.GREEN));
		assertTrue("Truck should not stop at a yellow crosswalk light.",
				t.canPass(Terrain.CROSSWALK, Light.YELLOW));

	}

	/**
	 * Test method for reset
	 */
	@Test
	public void testReset() {
		// test if reset method resets truck to default
		Truck t = new Truck(0, 0, Direction.NORTH);
		Truck copy = new Truck(0, 0, Direction.NORTH);

		t.setX(2);
		t.setY(3);

		t.reset();
		// copy object with same params should give same toString
		assertEquals("Reset is not restoring default fields.", t.toString(),
				copy.toString());

	}

	/**
	 * Test method for getImageFileName
	 */
	@Test
	public void testGetImageFileName() {
		// test if method gets the correct truck file name
		String correct = "truck.gif";

		Truck t = new Truck(0, 0, Direction.NORTH);
		assertEquals("Truck is not getting the correct file name.", correct,
				t.getImageFileName());

	}

	// no need to test poke method because a truck never dies
	// also don't need to test toString because what it does is trivial. Just
	// toString just lists important vehicle fields.

}
